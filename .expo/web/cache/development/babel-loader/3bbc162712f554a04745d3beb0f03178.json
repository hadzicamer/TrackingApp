{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\n\nvar Model = function () {\n  function Model(data, save) {\n    var _this = this;\n\n    _classCallCheck(this, Model);\n\n    try {\n      this.data = JSON.parse(data) || {};\n    } catch (e) {\n      throw new Error('Invalid data');\n    }\n\n    this.save = function () {\n      return save(_this.data);\n    };\n\n    this.nextId = Math.max.apply(Math, Object.keys(this.data).concat([-1])) + 1;\n  }\n\n  _createClass(Model, [{\n    key: \"get\",\n    value: function get(id) {\n      return this.data[id];\n    }\n  }, {\n    key: \"add\",\n    value: function add(entry) {\n      var _this2 = this;\n\n      var isArray = Array.isArray(entry);\n      var entries = isArray ? entry : [entry];\n      var ids = entries.map(function (entry) {\n        var id = entry.id = _this2.nextId;\n        _this2.data[id] = entry;\n        _this2.nextId += 1;\n        return id;\n      });\n      return isArray ? ids : ids[0];\n    }\n  }, {\n    key: \"update\",\n    value: function update(id, data) {\n      if (data === void 0) {\n        data = id;\n        id = data.id;\n      }\n\n      if (id == null) {\n        throw new Error('id is not specified');\n      }\n\n      data.id = id;\n      this.data[id] = data;\n      return id;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(id) {\n      var isArray = Array.isArray(id);\n      var ids = isArray ? id : [id];\n      var data = this.data;\n      ids.forEach(function (id) {\n        delete data[id];\n      });\n      return isArray ? ids : id;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var ids = Object.keys(this.data).map(Number);\n      this.data = {};\n      return ids;\n    }\n  }, {\n    key: \"find\",\n    value: function find(criteria) {\n      var data = this.data;\n      var keys = Object.keys(data);\n\n      if (criteria) {\n        var result = [];\n        keys.forEach(function (key) {\n          var entry = data[key];\n\n          for (var prop in criteria) {\n            if (criteria.hasOwnProperty(prop)) {\n              if (entry[prop] === criteria[prop]) {\n                result.push(entry);\n                break;\n              }\n            }\n          }\n        });\n        return result;\n      }\n\n      return keys.map(function (key) {\n        return data[key];\n      });\n    }\n  }]);\n\n  return Model;\n}();\n\nmodule.exports = Model;","map":{"version":3,"sources":["C:/Users/Amer/Documents/ReactNative/tracks/node_modules/react-native-async-storage/src/model.js"],"names":["Model","data","save","JSON","parse","e","Error","nextId","Math","max","apply","Object","keys","concat","id","entry","isArray","Array","entries","ids","map","forEach","Number","criteria","result","key","prop","hasOwnProperty","push","module","exports"],"mappings":"AAAA;;;;;;IAEMA,K;AAOJ,iBAAYC,IAAZ,EAAkBC,IAAlB,EAAwB;AAAA;;AAAA;;AACtB,QAAI;AACF,WAAKD,IAAL,GAAYE,IAAI,CAACC,KAAL,CAAWH,IAAX,KAAoB,EAAhC;AACD,KAFD,CAGA,OAAOI,CAAP,EAAU;AACR,YAAM,IAAIC,KAAJ,CAAU,cAAV,CAAN;AACD;;AAED,SAAKJ,IAAL,GAAY;AAAA,aAAMA,IAAI,CAAC,KAAI,CAACD,IAAN,CAAV;AAAA,KAAZ;;AACA,SAAKM,MAAL,GAAcC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAeF,IAAf,EAAqBG,MAAM,CAACC,IAAP,CAAY,KAAKX,IAAjB,EAAuBY,MAAvB,CAA8B,CAAC,CAAC,CAAF,CAA9B,CAArB,IAA4D,CAA1E;AACD;;;;wBAMGC,E,EAAI;AACN,aAAO,KAAKb,IAAL,CAAUa,EAAV,CAAP;AACD;;;wBAMGC,K,EAAO;AAAA;;AACT,UAAIC,OAAO,GAAGC,KAAK,CAACD,OAAN,CAAcD,KAAd,CAAd;AACA,UAAIG,OAAO,GAAGF,OAAO,GAAGD,KAAH,GAAW,CAACA,KAAD,CAAhC;AACA,UAAII,GAAG,GAAGD,OAAO,CAACE,GAAR,CAAY,UAACL,KAAD,EAAW;AAC/B,YAAID,EAAE,GAAGC,KAAK,CAACD,EAAN,GAAW,MAAI,CAACP,MAAzB;AACA,QAAA,MAAI,CAACN,IAAL,CAAUa,EAAV,IAAgBC,KAAhB;AACA,QAAA,MAAI,CAACR,MAAL,IAAe,CAAf;AACA,eAAOO,EAAP;AACD,OALS,CAAV;AAOA,aAAOE,OAAO,GAAGG,GAAH,GAASA,GAAG,CAAC,CAAD,CAA1B;AACD;;;2BAOML,E,EAAIb,I,EAAM;AACf,UAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,QAAAA,IAAI,GAAGa,EAAP;AACAA,QAAAA,EAAE,GAAGb,IAAI,CAACa,EAAV;AACD;;AAED,UAAIA,EAAE,IAAI,IAAV,EAAgB;AACd,cAAM,IAAIR,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAEDL,MAAAA,IAAI,CAACa,EAAL,GAAUA,EAAV;AACA,WAAKb,IAAL,CAAUa,EAAV,IAAgBb,IAAhB;AAEA,aAAOa,EAAP;AACD;;;2BAMMA,E,EAAI;AACT,UAAIE,OAAO,GAAGC,KAAK,CAACD,OAAN,CAAcF,EAAd,CAAd;AACA,UAAIK,GAAG,GAAGH,OAAO,GAAGF,EAAH,GAAQ,CAACA,EAAD,CAAzB;AACA,UAAIb,IAAI,GAAG,KAAKA,IAAhB;AAEAkB,MAAAA,GAAG,CAACE,OAAJ,CAAY,UAASP,EAAT,EAAa;AACvB,eAAOb,IAAI,CAACa,EAAD,CAAX;AACD,OAFD;AAIA,aAAOE,OAAO,GAAGG,GAAH,GAASL,EAAvB;AACD;;;4BAKO;AACN,UAAIK,GAAG,GAAGR,MAAM,CAACC,IAAP,CAAY,KAAKX,IAAjB,EAAuBmB,GAAvB,CAA2BE,MAA3B,CAAV;AACA,WAAKrB,IAAL,GAAY,EAAZ;AAEA,aAAOkB,GAAP;AACD;;;yBAMII,Q,EAAU;AACb,UAAItB,IAAI,GAAG,KAAKA,IAAhB;AACA,UAAIW,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAYX,IAAZ,CAAX;;AAEA,UAAIsB,QAAJ,EAAc;AACZ,YAAIC,MAAM,GAAG,EAAb;AAEAZ,QAAAA,IAAI,CAACS,OAAL,CAAa,UAASI,GAAT,EAAc;AACzB,cAAIV,KAAK,GAAGd,IAAI,CAACwB,GAAD,CAAhB;;AACA,eAAK,IAAIC,IAAT,IAAiBH,QAAjB,EAA2B;AACzB,gBAAIA,QAAQ,CAACI,cAAT,CAAwBD,IAAxB,CAAJ,EAAmC;AACjC,kBAAIX,KAAK,CAACW,IAAD,CAAL,KAAgBH,QAAQ,CAACG,IAAD,CAA5B,EAAoC;AAClCF,gBAAAA,MAAM,CAACI,IAAP,CAAYb,KAAZ;AACA;AACD;AACF;AACF;AACF,SAVD;AAYA,eAAOS,MAAP;AACD;;AAED,aAAOZ,IAAI,CAACQ,GAAL,CAAS,UAAAK,GAAG;AAAA,eAAIxB,IAAI,CAACwB,GAAD,CAAR;AAAA,OAAZ,CAAP;AACD;;;;;;AAIHI,MAAM,CAACC,OAAP,GAAiB9B,KAAjB","sourcesContent":["'use strict';\n\nclass Model {\n\n  /**\n   * @constructor\n   * @param data {string}\n   * @param save {function}\n   */\n  constructor(data, save) {\n    try {\n      this.data = JSON.parse(data) || {};\n    }\n    catch (e) {\n      throw new Error('Invalid data');\n    }\n\n    this.save = () => save(this.data);\n    this.nextId = Math.max.apply(Math, Object.keys(this.data).concat([-1])) + 1;\n  }\n\n  /**\n   * @param id {number}\n   * @returns {Object|undefined} Found entry.\n   */\n  get(id) {\n    return this.data[id];\n  }\n\n  /**\n   * @param entry {Object|Array<Object>}\n   * @returns {number|Array<number>} Added entry id.\n   */\n  add(entry) {\n    var isArray = Array.isArray(entry);\n    var entries = isArray ? entry : [entry];\n    var ids = entries.map((entry) => {\n      var id = entry.id = this.nextId;\n      this.data[id] = entry;\n      this.nextId += 1;\n      return id;\n    });\n\n    return isArray ? ids : ids[0];\n  }\n\n  /**\n   * @param id {number|Object}\n   * @param [data] {Object}\n   * @returns {number} Updated entry id.\n   */\n  update(id, data) {\n    if (data === void 0) {\n      data = id;\n      id = data.id;\n    }\n\n    if (id == null) {\n      throw new Error('id is not specified');\n    }\n\n    data.id = id;\n    this.data[id] = data;\n\n    return id;\n  }\n\n  /**\n   * @param id {number|Array<number>}\n   * @returns {number|Array<number>} Updated entry id.\n   */\n  remove(id) {\n    var isArray = Array.isArray(id);\n    var ids = isArray ? id : [id];\n    var data = this.data;\n\n    ids.forEach(function(id) {\n      delete data[id];\n    });\n\n    return isArray ? ids : id;\n  }\n\n  /**\n   * @returns {Array<number>} List of ids.\n   */\n  clear() {\n    var ids = Object.keys(this.data).map(Number);\n    this.data = {};\n\n    return ids;\n  }\n\n  /**\n   * @param [criteria] {Object}\n   * @returns {Array<Object>}\n   */\n  find(criteria) {\n    var data = this.data;\n    var keys = Object.keys(data);\n\n    if (criteria) {\n      var result = [];\n\n      keys.forEach(function(key) {\n        var entry = data[key];\n        for (var prop in criteria) {\n          if (criteria.hasOwnProperty(prop)) {\n            if (entry[prop] === criteria[prop]) {\n              result.push(entry);\n              break;\n            }\n          }\n        }\n      });\n\n      return result;\n    }\n\n    return keys.map(key => data[key]);\n  }\n\n}\n\nmodule.exports = Model;\n"]},"metadata":{},"sourceType":"script"}